function [ experiment ] = Pull(specified_query, query_type, varargin)
%PULL Will pull down all the experiments of a specified protocol, genotype,
%etc., by iterating over a list generated by iself and passed to FlyNet.Get

    % Make the credentials load regardless of location
    flynet_info = what('FlyNet');
    try
    cred = dir([flynet_info.path filesep 'dbCredentials.mat']);
    load(fullfile(flynet_info.path,'dbCredentials.mat'));
    catch dbCredErr                
        disp('Cannot find dbCredentials.mat in FlyNet package');
        error(dbCredErr.message);
    end            
    db = FlyNet.database_janelia(dbCredentials);
    
    % Deal with the input arguments now.
    if nargin < 2 || ~ischar(specified_query) || ~ischar(query_type) 
        error('specified_query and query_type must be specified strings');
    end
    
    switch query_type        
        case {'protocol','Protocol','PROTOCOL'}
            exp_pks = db.query(['SELECT id FROM experiment WHERE protocol = "' specified_query '"']);                        
        case 'literal'
            exp_pks = db.query(specified_query);
        otherwise
            error('query type must be protocol, for now')
    end
    
    
    % Iterate over list of primary keys, and build up an array of
    % experiment objects with calls to FlyNet.Get
    if strcmpi(exp_pks,'No Data')
        error('No experiment primary keys returned when searching for experiments');
    else
        fprintf('experiment primary keys search returned: \n') 
        disp(exp_pks)
    end
    
    for i = 1:numel(exp_pks)
        
        if nargin == 3
            trial_string = ['(' varargin{1}{1}];           
            for t = 2:numel(varargin{1})
                trial_string = [ trial_string, ',  ', varargin{1}{t} ]; %#ok<*AGROW>
            end
            trial_string = [trial_string, ')'];
            trial_pks = db.query(['SELECT id FROM trial WHERE experiment_id = "' num2str(exp_pks(i)) '" AND trial_name IN ' trial_string]);
        elseif nargin == 2
            trial_pks = db.query(['SELECT id FROM trial WHERE experiment_id = "' num2str(exp_pks(i)) '"']);
        else 
            error('Pull only takes three arguments, query, type and trial_names (as a cellstr)');
        end
        
        fprintf('Pulling experiment %d/%d \n', i, numel(exp_pks));
        out = FlyNet.Get(db, exp_pks(i), trial_pks);
        experiment{i} = out.experiment;
    end
end

